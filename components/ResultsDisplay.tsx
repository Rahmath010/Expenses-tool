import React, { useState, useMemo } from 'react';
import type { ReceiptData, LineItem } from '../types';
import { RefreshIcon, SaveIcon, CheckCircleIcon, FilePdfIcon, UsersIcon } from './Icons';

interface ResultsDisplayProps {
  imageUrl: string;
  initialData: ReceiptData;
  onScanAnother: () => void;
  onSave: (receipt: ReceiptData) => void;
}
type CurrencyCode = 'USD' | 'INR' | 'GBP' | 'AED';

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ imageUrl, initialData, onScanAnother, onSave }) => {
  const [receiptData, setReceiptData] = useState<ReceiptData>(initialData);
  const [isSaved, setIsSaved] = useState<boolean>(false);
  const [splitCount, setSplitCount] = useState<number>(1);

  const formatCurrency = (amount: number, currencyCode: CurrencyCode) => {
    try {
        return new Intl.NumberFormat('en-US', { style: 'currency', currency: currencyCode }).format(amount);
    } catch (error) {
        console.warn(`Could not format currency for ${currencyCode}. Falling back.`);
        return `${currencyCode} ${amount.toFixed(2)}`;
    }
  };

  const perPersonAmount = useMemo(() => {
    if (splitCount > 0 && receiptData.total_amount > 0) {
      return receiptData.total_amount / splitCount;
    }
    return 0;
  }, [receiptData.total_amount, splitCount]);


  const handleInputChange = <K extends keyof ReceiptData>(
    field: K,
    value: ReceiptData[K]
  ) => {
    setReceiptData(prev => ({ ...prev, [field]: value }));
    setIsSaved(false); // Reset saved state on any change
  };
  
  const handleLineItemChange = (index: number, field: keyof LineItem, value: string | number) => {
    const updatedLineItems = [...receiptData.line_items];
    updatedLineItems[index] = { ...updatedLineItems[index], [field]: value };
    handleInputChange('line_items', updatedLineItems);
  };
  
  const handleSave = () => {
    try {
      onSave(receiptData);
      setIsSaved(true);
    } catch (error) {
        console.error("Failed to save receipt:", error);
        alert("Could not save the receipt.");
    }
  };

  const handleExportPdf = () => {
    try {
        const { jsPDF } = (window as any).jspdf;
        const doc = new jsPDF({
            orientation: 'p',
            unit: 'mm',
            format: 'a4'
        });
        
        const pageHeight = doc.internal.pageSize.height;
        const pageWidth = doc.internal.pageSize.width;
        const margin = 20;
        let yPosition = 0;

        const addHeader = () => {
            doc.setFontSize(10);
            doc.setTextColor(100);
            doc.text(`Receipt: ${receiptData.merchant_name}`, margin, 15);
            doc.text(`Date: ${receiptData.transaction_date}`, pageWidth - margin, 15, { align: 'right' });
            doc.setLineWidth(0.2);
            doc.line(margin, 18, pageWidth - margin, 18);
        }
        
        const addFooter = () => {
            const pageCount = doc.internal.getNumberOfPages();
            for(let i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                doc.setLineWidth(0.2);
                doc.line(margin, pageHeight - 18, pageWidth - margin, pageHeight - 18);
                doc.setFontSize(10);
                doc.setTextColor(150);
                doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
                doc.text(`Generated by AI Receipt Scanner`, margin, pageHeight - 10);
            }
        }

        // --- PAGE 1: DETAILS ---
        addHeader();
        
        doc.setFontSize(22);
        doc.setTextColor(40);
        doc.text("Receipt Details", margin, 30);
        
        yPosition = 52;
        
        doc.setLineWidth(0.5);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 8;
        doc.setFontSize(11);
        doc.setFont('helvetica', 'bold');
        doc.text("Description", margin, yPosition);
        doc.text("Amount", pageWidth - margin, yPosition, { align: 'right' });
        doc.setFont('helvetica', 'normal');
        yPosition += 3;
        doc.setLineWidth(0.2);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 7;

        receiptData.line_items.forEach(item => {
            if (yPosition > pageHeight - 40) { // Check for page break
                doc.addPage();
                addHeader();
                yPosition = 30;
            }
            const splitDescription = doc.splitTextToSize(item.description, 120);
            doc.text(splitDescription, margin, yPosition);
            doc.text(formatCurrency(item.amount, receiptData.currency), pageWidth - margin, yPosition, { align: 'right' });
            yPosition += (splitDescription.length * 5) + 3;
        });

        if (yPosition > pageHeight - 50) {
            doc.addPage();
            addHeader();
            yPosition = 30;
        }

        yPosition += 5;
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 10;
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text("Tax:", pageWidth - margin - 20, yPosition, { align: 'right' });
        doc.setFont('helvetica', 'normal');
        doc.text(formatCurrency(receiptData.tax_amount, receiptData.currency), pageWidth - margin, yPosition, { align: 'right' });
        yPosition += 7;

        doc.setFont('helvetica', 'bold');
        doc.text("Total:", pageWidth - margin - 20, yPosition, { align: 'right' });
        doc.setFont('helvetica', 'normal');
        doc.text(formatCurrency(receiptData.total_amount, receiptData.currency), pageWidth - margin, yPosition, { align: 'right' });
        
        if (splitCount > 1) {
            yPosition += 15;
            doc.line(margin, yPosition, pageWidth - margin, yPosition);
            yPosition += 8;
            doc.setFontSize(12);
            doc.setFont('helvetica', 'bold');
            doc.text("Bill Split Details", margin, yPosition);
            yPosition += 8;
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(11);
            doc.text(`Split between ${splitCount} people:`, margin, yPosition);
            doc.text(formatCurrency(perPersonAmount, receiptData.currency) + " / person", pageWidth - margin, yPosition, { align: 'right' });
        }


        // --- IMAGE PAGE ---
        doc.addPage();
        addHeader();
        doc.setFontSize(18);
        doc.setTextColor(40);
        doc.text("Original Receipt Image", margin, 30);
        try {
            const imgProps = doc.getImageProperties(imageUrl);
            const imgWidth = pageWidth - margin * 2;
            const imgHeight = (imgProps.height * imgWidth) / imgProps.width;
            let finalImgHeight = imgHeight;
            const availableHeight = pageHeight - 40 - margin;

            if (imgHeight > availableHeight) {
                finalImgHeight = availableHeight;
            }

            doc.addImage(imageUrl, 'JPEG', margin, 40, imgWidth, finalImgHeight, undefined, 'FAST');
        } catch(e) {
            console.error("Failed to add image to PDF", e);
            doc.text("Could not load receipt image.", margin, 40);
        }
        
        addFooter();

        const merchantName = receiptData.merchant_name.replace(/[^a-z0-9]/gi, '_').toLowerCase();
        doc.save(`receipt_${merchantName}_${receiptData.transaction_date}.pdf`);
    } catch (error) {
        console.error("Failed to export PDF:", error);
        alert("Could not export the receipt as a PDF.");
    }
  };


  return (
    <div className="bg-slate-800/50 border border-slate-700 p-4 sm:p-6 rounded-2xl animate-fade-in">
        <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-emerald-400">Extracted Data</h2>
        </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Image Viewer */}
        <div className="w-full h-96 lg:h-auto bg-slate-900 rounded-xl p-2 border border-slate-700">
            <img src={imageUrl} alt="Uploaded Receipt" className="w-full h-full object-contain rounded-lg" />
        </div>

        {/* Extracted Data Form */}
        <div className="space-y-4">
            <InputField label="Merchant" value={receiptData.merchant_name} onChange={e => handleInputChange('merchant_name', e.target.value)} />
            <div className="grid grid-cols-2 gap-4">
                <InputField label="Date" type="date" value={receiptData.transaction_date} onChange={e => handleInputChange('transaction_date', e.target.value)} />
                <SelectField 
                    label="Currency" 
                    value={receiptData.currency} 
                    onChange={e => handleInputChange('currency', e.target.value as CurrencyCode)}
                    options={[
                        { value: 'USD', label: 'USD' },
                        { value: 'INR', label: 'INR' },
                        { value: 'GBP', label: 'GBP' },
                        { value: 'AED', label: 'AED' },
                    ]}
                />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <InputField label="Tax" type="number" value={receiptData.tax_amount} onChange={e => handleInputChange('tax_amount', parseFloat(e.target.value) || 0)} />
              <InputField label="Total" type="number" value={receiptData.total_amount} onChange={e => handleInputChange('total_amount', parseFloat(e.target.value) || 0)} />
            </div>

            {/* Split Bill Section */}
            <div>
              <h3 className="text-lg font-semibold text-slate-300 mb-2 flex items-center gap-2">
                <UsersIcon className="w-5 h-5 text-sky-400" />
                Split The Bill
              </h3>
              <div className="bg-slate-700/50 p-3 rounded-lg">
                <div className="flex items-center gap-4 mb-2">
                  <label htmlFor="split-count" className="text-sm font-medium text-slate-400 whitespace-nowrap">
                    People: <span className="font-bold text-lg text-slate-200">{splitCount}</span>
                  </label>
                  <input
                    id="split-count"
                    type="range"
                    min="1"
                    max="10"
                    step="1"
                    value={splitCount}
                    onChange={(e) => setSplitCount(parseInt(e.target.value, 10))}
                    className="w-full h-2 bg-slate-600 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:bg-emerald-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:cursor-pointer"
                  />
                </div>
                <div className="mt-3 text-center bg-slate-900/50 p-3 rounded-lg">
                  <p className="text-sm text-slate-400">Each person pays</p>
                  <p className="text-2xl font-bold text-emerald-400">
                    {formatCurrency(perPersonAmount, receiptData.currency)}
                  </p>
                </div>
              </div>
            </div>

            {/* Line Items */}
            <div>
                <h3 className="text-lg font-semibold text-slate-300 mb-2">Line Items</h3>
                <div className="space-y-2 max-h-48 overflow-y-auto pr-2">
                    {receiptData.line_items.map((item, index) => (
                        <div key={index} className="flex items-center gap-2 bg-slate-700/50 p-2 rounded-md">
                            <input
                                type="text"
                                value={item.description}
                                onChange={(e) => handleLineItemChange(index, 'description', e.target.value)}
                                className="flex-grow bg-transparent text-slate-200 focus:outline-none"
                                aria-label={`Item ${index + 1} description`}
                            />
                            <input
                                type="number"
                                value={item.amount}
                                onChange={(e) => handleLineItemChange(index, 'amount', parseFloat(e.target.value) || 0)}
                                className="w-24 bg-slate-800 text-slate-200 rounded-md p-1 text-right focus:outline-none focus:ring-2 focus:ring-emerald-500"
                                aria-label={`Item ${index + 1} amount`}
                            />
                        </div>
                    ))}
                </div>
            </div>
            
            <div className="pt-4 border-t border-slate-700 space-y-3">
                 <button
                    onClick={handleSave}
                    disabled={isSaved}
                    className="w-full flex items-center justify-center gap-2 py-3 bg-emerald-600 hover:bg-emerald-500 disabled:bg-emerald-800/60 disabled:cursor-not-allowed rounded-lg text-white font-bold transition-colors"
                >
                    {isSaved ? (
                        <>
                            <CheckCircleIcon className="w-6 h-6" />
                            Saved
                        </>
                    ) : (
                        <>
                            <SaveIcon className="w-5 h-5" />
                            Save
                        </>
                    )}
                </button>
                <button
                    onClick={handleExportPdf}
                    className="w-full flex items-center justify-center gap-2 py-3 bg-sky-600 hover:bg-sky-500 rounded-lg text-white font-bold transition-colors"
                >
                    <FilePdfIcon className="w-5 h-5" />
                    Export as PDF
                </button>
                 <button
                    onClick={onScanAnother}
                    className="w-full flex items-center justify-center gap-2 py-2 bg-slate-700 hover:bg-slate-600 rounded-lg text-slate-300 transition-colors"
                >
                    <RefreshIcon className="w-5 h-5"/>
                    Scan Another
                </button>
            </div>
        </div>
      </div>
    </div>
  );
};

interface InputFieldProps {
    label: string;
    value: string | number;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    type?: string;
}

const InputField: React.FC<InputFieldProps> = ({ label, value, onChange, type = 'text' }) => (
    <div>
        <label className="block text-sm font-medium text-slate-400 mb-1">{label}</label>
        <input
            type={type}
            value={value}
            onChange={onChange}
            className="w-full bg-slate-700/50 border border-slate-600 text-slate-200 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all"
            step={type === 'number' ? '0.01' : undefined}
        />
    </div>
);

interface SelectFieldProps {
    label: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    options: { value: string; label: string }[];
}

const SelectField: React.FC<SelectFieldProps> = ({ label, value, onChange, options }) => (
    <div>
        <label className="block text-sm font-medium text-slate-400 mb-1">{label}</label>
        <select
            value={value}
            onChange={onChange}
            className="w-full bg-slate-700/50 border border-slate-600 text-slate-200 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all"
        >
            {options.map(option => (
                <option key={option.value} value={option.value}>{option.label}</option>
            ))}
        </select>
    </div>
);


export default ResultsDisplay;